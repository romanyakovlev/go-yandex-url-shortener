// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.3
// source: shortener.proto

package protobuf

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLShortenerService_SaveURL_FullMethodName         = "/shortener.URLShortenerService/SaveURL"
	URLShortenerService_DeleteBatchURL_FullMethodName  = "/shortener.URLShortenerService/DeleteBatchURL"
	URLShortenerService_GetURLByID_FullMethodName      = "/shortener.URLShortenerService/GetURLByID"
	URLShortenerService_GetURLByUser_FullMethodName    = "/shortener.URLShortenerService/GetURLByUser"
	URLShortenerService_ShortenBatchURL_FullMethodName = "/shortener.URLShortenerService/ShortenBatchURL"
	URLShortenerService_GetStats_FullMethodName        = "/shortener.URLShortenerService/GetStats"
)

// URLShortenerServiceClient is the client API for URLShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortenerServiceClient interface {
	// SaveURL shortens a given URL.
	SaveURL(ctx context.Context, in *SaveURLRequest, opts ...grpc.CallOption) (*SaveURLResponse, error)
	// DeleteBatchURL deletes a batch of URLs.
	DeleteBatchURL(ctx context.Context, in *DeleteBatchURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetURLByID retrieves the original URL based on a short URL.
	GetURLByID(ctx context.Context, in *GetURLByIDRequest, opts ...grpc.CallOption) (*GetURLByIDResponse, error)
	// GetURLByUser retrieves all URLs uploaded by a user.
	GetURLByUser(ctx context.Context, in *GetURLByUserRequest, opts ...grpc.CallOption) (*GetURLByUserResponse, error)
	// ShortenBatchURL shortens a batch of URLs.
	ShortenBatchURL(ctx context.Context, in *ShortenBatchURLRequest, opts ...grpc.CallOption) (*ShortenBatchURLResponse, error)
	// GetStats retrieves statistics about URLs and users.
	GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error)
}

type uRLShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerServiceClient(cc grpc.ClientConnInterface) URLShortenerServiceClient {
	return &uRLShortenerServiceClient{cc}
}

func (c *uRLShortenerServiceClient) SaveURL(ctx context.Context, in *SaveURLRequest, opts ...grpc.CallOption) (*SaveURLResponse, error) {
	out := new(SaveURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_SaveURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) DeleteBatchURL(ctx context.Context, in *DeleteBatchURLRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, URLShortenerService_DeleteBatchURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) GetURLByID(ctx context.Context, in *GetURLByIDRequest, opts ...grpc.CallOption) (*GetURLByIDResponse, error) {
	out := new(GetURLByIDResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_GetURLByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) GetURLByUser(ctx context.Context, in *GetURLByUserRequest, opts ...grpc.CallOption) (*GetURLByUserResponse, error) {
	out := new(GetURLByUserResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_GetURLByUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) ShortenBatchURL(ctx context.Context, in *ShortenBatchURLRequest, opts ...grpc.CallOption) (*ShortenBatchURLResponse, error) {
	out := new(ShortenBatchURLResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_ShortenBatchURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) GetStats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortenerServiceServer is the server API for URLShortenerService service.
// All implementations must embed UnimplementedURLShortenerServiceServer
// for forward compatibility
type URLShortenerServiceServer interface {
	// SaveURL shortens a given URL.
	SaveURL(context.Context, *SaveURLRequest) (*SaveURLResponse, error)
	// DeleteBatchURL deletes a batch of URLs.
	DeleteBatchURL(context.Context, *DeleteBatchURLRequest) (*emptypb.Empty, error)
	// GetURLByID retrieves the original URL based on a short URL.
	GetURLByID(context.Context, *GetURLByIDRequest) (*GetURLByIDResponse, error)
	// GetURLByUser retrieves all URLs uploaded by a user.
	GetURLByUser(context.Context, *GetURLByUserRequest) (*GetURLByUserResponse, error)
	// ShortenBatchURL shortens a batch of URLs.
	ShortenBatchURL(context.Context, *ShortenBatchURLRequest) (*ShortenBatchURLResponse, error)
	// GetStats retrieves statistics about URLs and users.
	GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error)
	mustEmbedUnimplementedURLShortenerServiceServer()
}

// UnimplementedURLShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedURLShortenerServiceServer struct {
}

func (UnimplementedURLShortenerServiceServer) SaveURL(context.Context, *SaveURLRequest) (*SaveURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) DeleteBatchURL(context.Context, *DeleteBatchURLRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBatchURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetURLByID(context.Context, *GetURLByIDRequest) (*GetURLByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByID not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetURLByUser(context.Context, *GetURLByUserRequest) (*GetURLByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURLByUser not implemented")
}
func (UnimplementedURLShortenerServiceServer) ShortenBatchURL(context.Context, *ShortenBatchURLRequest) (*ShortenBatchURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenBatchURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetStats(context.Context, *emptypb.Empty) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedURLShortenerServiceServer) mustEmbedUnimplementedURLShortenerServiceServer() {}

// UnsafeURLShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerServiceServer will
// result in compilation errors.
type UnsafeURLShortenerServiceServer interface {
	mustEmbedUnimplementedURLShortenerServiceServer()
}

func RegisterURLShortenerServiceServer(s grpc.ServiceRegistrar, srv URLShortenerServiceServer) {
	s.RegisterService(&URLShortenerService_ServiceDesc, srv)
}

func _URLShortenerService_SaveURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).SaveURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_SaveURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).SaveURL(ctx, req.(*SaveURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_DeleteBatchURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBatchURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).DeleteBatchURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_DeleteBatchURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).DeleteBatchURL(ctx, req.(*DeleteBatchURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_GetURLByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).GetURLByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_GetURLByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).GetURLByID(ctx, req.(*GetURLByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_GetURLByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetURLByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).GetURLByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_GetURLByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).GetURLByUser(ctx, req.(*GetURLByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_ShortenBatchURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShortenBatchURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).ShortenBatchURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_ShortenBatchURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).ShortenBatchURL(ctx, req.(*ShortenBatchURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).GetStats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortenerService_ServiceDesc is the grpc.ServiceDesc for URLShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.URLShortenerService",
	HandlerType: (*URLShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveURL",
			Handler:    _URLShortenerService_SaveURL_Handler,
		},
		{
			MethodName: "DeleteBatchURL",
			Handler:    _URLShortenerService_DeleteBatchURL_Handler,
		},
		{
			MethodName: "GetURLByID",
			Handler:    _URLShortenerService_GetURLByID_Handler,
		},
		{
			MethodName: "GetURLByUser",
			Handler:    _URLShortenerService_GetURLByUser_Handler,
		},
		{
			MethodName: "ShortenBatchURL",
			Handler:    _URLShortenerService_ShortenBatchURL_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _URLShortenerService_GetStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
